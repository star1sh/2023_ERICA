#include <Wire.h>
#include <DHT.h>
#include <DHT_U.h>
 //DHT센서를 사용하기 위한 라이브러리
 // 라이브러리 해더 
#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal_I2C.h>  // including header
 
LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x3F for a 16 chars and 2 line display
// (주소값, 16x2 디스플레이)
 
#define TILT 8
#define buzzer 4
#include <LiquidCrystal_I2C.h>  // including header
#include "RTClib.h"

#define DS3231_I2C_ADDRESS 104
#define DHTPIN 2
#define DHTTYPE DHT11
// SS(Chip Select)과 RST(Reset) 핀 설정
// 나머지 PIN은 SPI 라이브러리를 사용하기에 별도의 설정이 필요없다.
#define SS_PIN 10
#define RST_PIN 9
 
// 라이브러리 생성
MFRC522 mfrc(SS_PIN, RST_PIN); // Instance of the class

MFRC522::MIFARE_Key key; 

//이전 ID와 비교하기위한 변수
byte nuidPICC[4];

int tilt = 3;
int speakerPin = 4;

int numTones = 4;

int tones[] = {261, 277, 294, 311, 330, 349, 370, 392};

 

DHT dht(DHTPIN, DHTTYPE); // 센서 객체 초기화

RTC_DS3231 rtc; //RTC real time clock 설정을 합니다.
 

// 데이터핀 연결

// SCL - pin A5

// SDA - pin A4

 

byte seconds, minutes, hours, day, date, month, year;

char weekDay[4];

 

byte tMSB, tLSB;

float temp3231;

 

void setup()

{

    Wire.begin();

    Serial.begin(9600);

    dht.begin(); //센서시작

    SPI.begin(); // SPI 시작
    mfrc.PCD_Init(); // RFID 시작
  
    lcd.init(); // lcd 객체 초기화
    lcd.clear();  // 화면 지우고 커서를 왼쪽 상단 모서리로 옮김         
    lcd.backlight();      // Make sure backlight is on   // 백라이트 on
    lcd.setCursor(2,0);   //Set cursor to character 2 on line 0   // 커서 옮김. 0행에 2열
    lcd.print("Welcome to PhM-sys");   // 문자 출력
  
    lcd.setCursor(0,1);   //Move cursor to character 2 on line 1   // 커서 옮김. 1행에 0열
    lcd.print("Tag your ID-card");
  
    // Print a message on both lines of the LCD.
    
    pinMode(TILT,INPUT);
    Serial.begin(9600);

}

 

void loop()

{
    get3231Date();

    float h = dht.readHumidity();
    float t = dht.readTemperature();

    if (h>70){
      lcd.init();
      lcd.setCursor(2,0);   //Set cursor to character 2 on line 0   // 커서 옮김. 0행에 2열
      lcd.print("Too much Humidity");   // 문자 출력
      delay(100);
      for(int i = 0; i < numTones; i++){
        tone(speakerPin, tones[i]);
        delay(500);
        }
      noTone(speakerPin);
      delay(1000);
    }
    if (t>40){
      lcd.init();
      lcd.setCursor(2,0);   //Set cursor to character 2 on line 0   // 커서 옮김. 0행에 2열
      lcd.print("Too hot for pills");   // 문자 출력
      delay(100);
      for(int i = 0; i < numTones; i++){
        tone(speakerPin, tones[i]);
        delay(500);
        }
      noTone(speakerPin);
      delay(1000);
    }
    
    if(isnan(h)||isnan(t)){

      Serial.println("센서를 읽는데 실패했습니다!");
      return;//더이상 코드 실행치않음
    }

    
  // 카드가 인식되었다면 다음으로 넘어가고 아니면 더이상 
  // 실행 안하고 리턴
  if ( !mfrc.PICC_IsNewCardPresent() || !mfrc.PICC_ReadCardSerial()){
    delay(500);
    return;
  }

  if (mfrc.uid.uidByte[0] == 163 && mfrc.uid.uidByte[1] == 141 && mfrc.uid.uidByte[2] == 151 && mfrc.uid.uidByte[3] == 165){
    lcd.init();
    lcd.setCursor(2,0);   //Set cursor to character 2 on line 0   // 커서 옮김. 0행에 2열
    lcd.print("Let's be healthy!");   // 문자 출력
    
    lcd.setCursor(0,1);   //Move cursor to character 2 on line 1   // 커서 옮김. 1행에 0열
    lcd.print("Take your pill");
    delay(1000);
  

    if(hours<12 && hours>5){
    lcd.init();
    lcd.setCursor(2,0);   //Set cursor to character 2 on line 0   // 커서 옮김. 0행에 2열
    lcd.print("Take the first pill!");   // 문자 출력
    delay(1000);
    }
  }
  else{
    lcd.init();
    lcd.setCursor(2,0);   //Set cursor to character 2 on line 0   // 커서 옮김. 0행에 2열
    lcd.print("Unable to access");
    lcd.setCursor(0,1);   //Move cursor to character 2 on line 1   // 커서 옮김. 1행에 0열
    lcd.print("Wrong ID-card");
    delay(1000);   // 문자 출력

    int state = digitalRead(tilt);
    if(state == LOW){
      for(int i = 0; i < numTones; i++){
        tone(speakerPin, tones[i]);
        delay(500);
        }
      noTone(speakerPin);
      delay(1000);
    }
  }
 
    watchConsole();

    get3231Date();

  
  Serial.println(get3231Temp());
 
  delay(1000);
}

 

// 10진수를 2진화 10진수인 BCD 로 변환 (Binary Coded Decimal)
byte decToBcd(byte val)

{

  return ( (val/10*16) + (val%10) );

}

 

void watchConsole()

{

  if (Serial.available()) {      // Look for char in serial queue and process if found

    if (Serial.read() == 84) {   //If command = "T" Set Date

      set3231Date();

      get3231Date();

      Serial.println(" ");

    }

  }

}

 

//시간설정

// T(설정명령) + 년(00~99) + 월(01~12) + 일(01~31) + 시(00~23) + 분(00~59) + 초(00~59) + 요일(1~7, 일1 월2 화3 수4 목5 금6 토7)

// 예: T1605091300002 (2016년 5월 9일 13시 00분 00초 월요일)

void set3231Date()

{

  year    = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));

  month   = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));

  date    = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));

  hours   = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));

  minutes = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));

  seconds = (byte) ((Serial.read() - 48) * 10 + (Serial.read() - 48));

  day     = (byte) (Serial.read() - 48);

 

  Wire.beginTransmission(DS3231_I2C_ADDRESS);

  Wire.write(0x00);

  Wire.write(decToBcd(seconds));

  Wire.write(decToBcd(minutes));

  Wire.write(decToBcd(hours));

  Wire.write(decToBcd(day));

  Wire.write(decToBcd(date));

  Wire.write(decToBcd(month));

  Wire.write(decToBcd(year));

  Wire.endTransmission();

}

 

 

void get3231Date()

{

  // send request to receive data starting at register 0

  Wire.beginTransmission(DS3231_I2C_ADDRESS); // 104 is DS3231 device address

  Wire.write(0x00); // start at register 0

  Wire.endTransmission();

  Wire.requestFrom(DS3231_I2C_ADDRESS, 7); // request seven bytes

 

  if(Wire.available()) {

    seconds = Wire.read(); // get seconds

    minutes = Wire.read(); // get minutes

    hours   = Wire.read();   // get hours

    day     = Wire.read();

    date    = Wire.read();

    month   = Wire.read(); //temp month

    year    = Wire.read();

       

    seconds = (((seconds & B11110000)>>4)*10 + (seconds & B00001111)); // convert BCD to decimal

    minutes = (((minutes & B11110000)>>4)*10 + (minutes & B00001111)); // convert BCD to decimal

    hours   = (((hours & B00110000)>>4)*10 + (hours & B00001111)); // convert BCD to decimal (assume 24 hour mode)

    day     = (day & B00000111); // 1-7

    date    = (((date & B00110000)>>4)*10 + (date & B00001111)); // 1-31

    month   = (((month & B00010000)>>4)*10 + (month & B00001111)); //msb7 is century overflow

    year    = (((year & B11110000)>>4)*10 + (year & B00001111));

  }

  else {

    //oh noes, no data!

  }

 

  switch (day) {

    case 1:

      strcpy(weekDay, "Sun");

      break;

    case 2:

      strcpy(weekDay, "Mon");

      break;

    case 3:

      strcpy(weekDay, "Tue");

      break;

    case 4:

      strcpy(weekDay, "Wed");

      break;

    case 5:

      strcpy(weekDay, "Thu");

      break;

    case 6:

      strcpy(weekDay, "Fri");

      break;

    case 7:

      strcpy(weekDay, "Sat");

      break;

  }

}

 

float get3231Temp()

{

  //temp registers (11h-12h) get updated automatically every 64s

  Wire.beginTransmission(DS3231_I2C_ADDRESS);

  Wire.write(0x11);

  Wire.endTransmission();

  Wire.requestFrom(DS3231_I2C_ADDRESS, 2);

 

  if(Wire.available()) {

    tMSB = Wire.read(); //2's complement int portion

    tLSB = Wire.read(); //fraction portion

   

    temp3231 = (tMSB & B01111111); //do 2's math on Tmsb

    temp3231 += ( (tLSB >> 6) * 0.25 ); //only care about bits 7 & 8

  }

  else {

    //error! no data!

  }

  return temp3231;

}
